using UnityEngine;

/// <summary>
/// 探索事件
/// </summary>
public partial class UIExploreEvent : MonoBehaviour
{

    /// <summary>
    /// 自动移动结束
    /// </summary>
    public CallBack OnAutoMoveEnd;


    /// <summary>
    /// 得到事件可用距离
    /// </summary>
    /// <param name="isLeft"></param>
    /// <returns></returns>
    public float GetEventUsableMoveLength(bool isLeft)
    {
        if (isLeft)
        {
            return -rectTrans.anchoredPosition.x;
        }

        if (!ExploreSystem.Instance.IsCanMoveNextScene())
        {
            return rectTrans.anchoredPosition.x + GameTools.CanvasWidth * ExploreSystem.Instance.NowSceneIndex;
        }

        return rectTrans.sizeDelta.x + rectTrans.anchoredPosition.x - GameTools.CanvasWidth;
    }
    /// <summary>
    /// 取消自动移动
    /// </summary>
    public void CancelAutoMove()
    {
        _isAutoMove = false;
    }

    /// <summary>
    /// 自动移动
    /// </summary>
    public bool AutoMove(float moveSpeed, bool isLeft = true)
    {
        _isAutoMove = false;
        _leftMove = isLeft;
        _moveSpeed = moveSpeed;
        //往右动
        if (!isLeft)
        {
            _isAutoMove = rectTrans.anchoredPosition.x >= _leftConfine.x ? false : true;
            return _isAutoMove;
        }
        //往左动
        if (!ExploreSystem.Instance.IsCanMoveNextScene())
        {
            if (rectTrans.anchoredPosition.x <= -GameTools.CanvasWidth * ExploreSystem.Instance.NowSceneIndex)
            {
                return false;
            }
            _isAutoMove = true;
            return true;
        }
        _isAutoMove = rectTrans.anchoredPosition.x <= _rightConfine.x ? false : true;
        return _isAutoMove;
    }
    /// <summary>
    /// 更新移动速度
    /// </summary>
    /// <param name="moveSpeed"></param>
    public void UpdateMoveSpeed(float moveSpeed)
    {
        _moveSpeed = moveSpeed;
    }
    /// <summary>
    /// 更新自动移动
    /// </summary>
    private void UpdateAutoMove()
    {
        if (!_isAutoMove)
        {
            return;
        }
        if (_leftMove)
        {
            //右边到底了
            if (rectTrans.anchoredPosition.x <= _rightConfine.x)
            {
                _isAutoMove = false;
                if (OnAutoMoveEnd != null)
                {
                    OnAutoMoveEnd();
                }
                return;
            }
            rectTrans.anchoredPosition = Vector3.MoveTowards(rectTrans.anchoredPosition, _rightConfine, _moveSpeed * Time.deltaTime);
            if (rectTrans.anchoredPosition.x <= _rightConfine.x)
            {
                rectTrans.anchoredPosition = _rightConfine;
            }
            return;
        }
        //右边移动
        //左边到底了
        if (rectTrans.anchoredPosition.x >= _leftConfine.x)
        {
            _isAutoMove = false;
            if (OnAutoMoveEnd != null)
            {
                OnAutoMoveEnd();
            }
            return;
        }
        rectTrans.anchoredPosition = Vector3.MoveTowards(rectTrans.anchoredPosition, _leftConfine, _moveSpeed * Time.deltaTime);
        if (rectTrans.anchoredPosition.x >= _leftConfine.x)
        {
            rectTrans.anchoredPosition = _leftConfine;
        }

    }

    /// <summary>
    /// 初始化信息
    /// </summary>
    private void InitInfo()
    {
        _leftConfine = new Vector2(0, rectTrans.anchoredPosition.y);
        _rightConfine = new Vector2(GameTools.CanvasWidth - rectTrans.sizeDelta.x, rectTrans.anchoredPosition.y);
    }

    //
    private float _moveSpeed;
    private bool _leftMove;
    private bool _isAutoMove;
    private Vector2 _leftConfine;
    private Vector2 _rightConfine;
}

