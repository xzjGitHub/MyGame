using System;
using GameEventDispose;

public partial class UIExploreEventBase
{
    /// <summary>
    ///  回调事件显示
    /// </summary>
    private void OnCallEventShow()
    {
        UpdateEventShowState();
        EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.EventShow, (object)null);
    }
    /// <summary>
    ///  回调事件能访问访问
    /// </summary>
    private void OnCallEventCanVisit()
    {
        if (_eventType == WPEventType.Trap) return;
        //
        OpenEventShow();
        UpdateEventButtonEnabled();
    }
    /// <summary>
    ///  回调事件自动访问
    /// </summary>
    private void OnCallEventAutoVisit()
    {
        if (OnAuotoVisit!=null)
        {
            OnAuotoVisit(this);
        }
    }

    /// <summary>
    /// 回调事件自动放弃访问_距离角色很近
    /// </summary>
    private void OnCallEventAutoAbandonVisit1()
    {
        //todo 取消事件自动访问
        return;
        ExploreSystem.Instance.IgnoreEvent( _eventAttribute);
        EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.EventQuit, (object)null);
        //
        _selectionPopup.CancelVisit();
        switch (_eventType)
        {
            case WPEventType.Trap:
                return;
        }
        if (OnFade != null) OnFade(null);
        EventDispatcher.Instance.CharEvent.DispatchEvent(EventId.CharEvent, CharActionOperation.TestShow, 0, 0, (object)null);
    }
    /// <summary>
    /// 回调事件自动放弃访问_离开了屏幕
    /// </summary>
    private void OnCallEventAutoAbandonVisit2()
    {
    }
}