using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
using LskConfig;



/// <summary>
/// Event_selectionConfig配置表
/// </summary>
public partial class Event_selectionConfig : IReader
{
    public List<Event_selection> _Event_selection = new List<Event_selection>();
    /// <summary>
    /// 读取配置表
    /// </summary>
    public void Reader(string content)
    {
        string[] array = Regex.Split(content, "\r\n");
        for (int i = 2; i < array.Length; i++)
        {
            _Event_selection.Add(new Event_selection(array[i]));
        }
    }
}



/// <summary>
/// Event_selection配置表
/// </summary>
public partial class Event_selection : IReader
{
    /// <summary>
    /// 
    /// </summary>
    public long selectionID;
    /// <summary>
    /// 选项类型
    /// </summary>
    public int selectionType;
    /// <summary>
    /// 种族需求，每个[]结构中包含任意1个即可（大括号里每个都必须有，小括号中，有任意一个即可）
    /// </summary>
    public   List<List<int>> charRaceReq;
    /// <summary>
    /// 职业需求，包含任意1个即可
    /// </summary>
    public List<int> charClassReq;
    /// <summary>
    /// 需求标签
    /// </summary>
    public List<int> flagReq;
    /// <summary>
    /// 不准标签
    /// </summary>
    public List<int> flagForbid;
    /// <summary>
    /// 添加标签
    /// </summary>
    public List<int> addFlag;
    /// <summary>
    /// 移除标签
    /// </summary>
    public List<int> remvFlag;
    /// <summary>
    /// 选项的旁白的文本ID
    /// </summary>
    public long selectionAside;
    /// <summary>
    /// 选项的文本ID
    /// </summary>
    public long selectionText;
    /// <summary>
    /// 选择选项后，触发的对话
    /// </summary>
    public long selectionDialog;
    /// <summary>
    /// 
    /// </summary>
    public long afterDialog;
    /// <summary>
    /// 几率组，基础值（实际值通过公式计算），4个值，分别对应-大奖(jackpot)，成功(success)，失败(failure)，大失败(epicFailure)，和值为10000；
    /// </summary>
    public List<int> chanceSet;
    /// <summary>
    /// 结果组，共4组，分别对应4种几率（读自公式），为空则事件结束。
    /// </summary>
    public   List<List<int>> resultSet;
    /// <summary>
    /// [金币消耗，魔力消耗，代币消耗]
    /// </summary>
    public List<int> currencyCost;
    /// <summary>
    /// 选项消耗的物品，[物品ID，数量]
    /// </summary>
    public   List<List<int>> itemCost;
    /// <summary>
    /// 选项消耗的[护盾%，护甲%，生命%]，基于初始值，%形式
    /// </summary>
    public List<float> attributeCost;
    /// <summary>
    /// 事件耗时增加
    /// </summary>
    public int addTimeCost;
    /// <summary>
    /// 选项可触发的关联事件，。仅有在当前选项会结束事件时生效。
    /// </summary>
    public int relatedEvent;
    /// <summary>
    /// 随机怪物列表
    /// </summary>
    public List<int> mobTeamList;
    /// <summary>
    /// 该选项对怪物战斗队伍等级的影响
    /// </summary>
    public int addMobLevel;
    /// <summary>
    /// 
    /// </summary>
    public int addTeamInitiative;
    /// <summary>
    /// 基本奖励等级
    /// </summary>
    public float baseRewardLevel;
    /// <summary>
    /// 
    /// </summary>
    public float baseCharExpReward;
    /// <summary>
    /// 
    /// </summary>
    public float baseGoldReward;
    /// <summary>
    /// 奖励等级分配-仅针对物品奖励，金币和经验奖励是固有的
    /// </summary>
    public List<float> itemRewardSetup;
    /// <summary>
    /// 奖励集合
    /// </summary>
    public List<int> itemRewardSet;



    public Event_selection() { }
    public Event_selection(string content)
    {
        Reader(content);
    }
    /// <summary>
    /// 读取配置表
    /// </summary>
    public void Reader(string content)
    {
        string[] array = content.Split('\t');
        selectionID = long.Parse(array[0]);
        selectionType = int.Parse(array[1]);
        //列表charRaceReq取值
        array[2] = array[2].Replace("[", "").Replace("]", "").Replace(" ","");
        charRaceReq = new   List<List<int>>();
        foreach (var str in array[2].Split('-'))
        {
            try 
            {
                charRaceReq.Add(str.Replace(" ", "").Split(',').Select(int.Parse).ToList());
            }
            catch (Exception) { }
        }
        //列表charClassReq取值
        array[3] = array[3].Replace("[", "").Replace("]", "").Replace(" ","");
        charClassReq = new List<int>();
        foreach (var _str in array[3].Split(','))
        {
            try { charClassReq.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        //列表flagReq取值
        array[4] = array[4].Replace("[", "").Replace("]", "").Replace(" ","");
        flagReq = new List<int>();
        foreach (var _str in array[4].Split(','))
        {
            try { flagReq.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        //列表flagForbid取值
        array[5] = array[5].Replace("[", "").Replace("]", "").Replace(" ","");
        flagForbid = new List<int>();
        foreach (var _str in array[5].Split(','))
        {
            try { flagForbid.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        //列表addFlag取值
        array[6] = array[6].Replace("[", "").Replace("]", "").Replace(" ","");
        addFlag = new List<int>();
        foreach (var _str in array[6].Split(','))
        {
            try { addFlag.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        //列表remvFlag取值
        array[7] = array[7].Replace("[", "").Replace("]", "").Replace(" ","");
        remvFlag = new List<int>();
        foreach (var _str in array[7].Split(','))
        {
            try { remvFlag.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        selectionAside = long.Parse(array[8]);
        selectionText = long.Parse(array[9]);
        selectionDialog = long.Parse(array[10]);
        afterDialog = long.Parse(array[11]);
        //列表chanceSet取值
        array[12] = array[12].Replace("[", "").Replace("]", "").Replace(" ","");
        chanceSet = new List<int>();
        foreach (var _str in array[12].Split(','))
        {
            try { chanceSet.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        //列表resultSet取值
        array[13] = array[13].Replace("[", "").Replace("]", "").Replace(" ","");
        resultSet = new   List<List<int>>();
        foreach (var str in array[13].Split('-'))
        {
            try 
            {
                resultSet.Add(str.Replace(" ", "").Split(',').Select(int.Parse).ToList());
            }
            catch (Exception) { }
        }
        //列表currencyCost取值
        array[14] = array[14].Replace("[", "").Replace("]", "").Replace(" ","");
        currencyCost = new List<int>();
        foreach (var _str in array[14].Split(','))
        {
            try { currencyCost.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        //列表itemCost取值
        array[15] = array[15].Replace("[", "").Replace("]", "").Replace(" ","");
        itemCost = new   List<List<int>>();
        foreach (var str in array[15].Split('-'))
        {
            try 
            {
                itemCost.Add(str.Replace(" ", "").Split(',').Select(int.Parse).ToList());
            }
            catch (Exception) { }
        }
        //列表attributeCost取值
        array[16] = array[16].Replace("[", "").Replace("]", "").Replace(" ","");
        attributeCost = new List<float>();
        foreach (var _str in array[16].Split(','))
        {
            try { attributeCost.Add(float.Parse(_str)); }
            catch (Exception) { }
        }
        addTimeCost = int.Parse(array[17]);
        relatedEvent = int.Parse(array[18]);
        //列表mobTeamList取值
        array[19] = array[19].Replace("[", "").Replace("]", "").Replace(" ","");
        mobTeamList = new List<int>();
        foreach (var _str in array[19].Split(','))
        {
            try { mobTeamList.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        addMobLevel = int.Parse(array[20]);
        addTeamInitiative = int.Parse(array[21]);
        baseRewardLevel = float.Parse(array[22]);
        baseCharExpReward = float.Parse(array[23]);
        baseGoldReward = float.Parse(array[24]);
        //列表itemRewardSetup取值
        array[25] = array[25].Replace("[", "").Replace("]", "").Replace(" ","");
        itemRewardSetup = new List<float>();
        foreach (var _str in array[25].Split(','))
        {
            try { itemRewardSetup.Add(float.Parse(_str)); }
            catch (Exception) { }
        }
        //列表itemRewardSet取值
        array[26] = array[26].Replace("[", "").Replace("]", "").Replace(" ","");
        itemRewardSet = new List<int>();
        foreach (var _str in array[26].Split(','))
        {
            try { itemRewardSet.Add(int.Parse(_str)); }
            catch (Exception) { }
        }
    }
}
