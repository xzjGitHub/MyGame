using System;
using System.Text.RegularExpressions;
using System.Collections.Generic;
using System.Linq;
using LskConfig;



/// <summary>
/// Event_templateConfig配置表
/// </summary>
public partial class Event_templateConfig : IReader
{
    public List<Event_template> _Event_template = new List<Event_template>();
    /// <summary>
    /// 读取配置表
    /// </summary>
    public void Reader(string content)
    {
        string[] array = Regex.Split(content, "\r\n");
        for (int i = 2; i < array.Length; i++)
        {
            _Event_template.Add(new Event_template(array[i]));
        }
    }
}



/// <summary>
/// Event_template配置表
/// </summary>
public partial class Event_template : IReader
{
    /// <summary>
    /// 
    /// </summary>
    public int eventID;
    /// <summary>
    /// 
    /// </summary>
    public string eventName;
    /// <summary>
    /// 显示在地图上的图标，0 = 不显示，1 = Boss，2 = 宝藏，3 = 资源，4 = 祭坛，5 = 任务，6 = 入口
    /// </summary>
    public int WPIcon;
    /// <summary>
    /// 事件资源
    /// </summary>
    public string eventRP;
    /// <summary>
    /// 陷阱的触发时间
    /// </summary>
    public int visitTime;
    /// <summary>
    /// 战斗事件显示的怪物形象
    /// </summary>
    public int mobModel;
    /// <summary>
    /// 开始对话
    /// </summary>
    public int startDialog;
    /// <summary>
    /// 默认成功
    /// </summary>
    public int defaultSuccess;
    /// <summary>
    /// 默认失败
    /// </summary>
    public int defaultFailure;
    /// <summary>
    /// 选项列表
    /// </summary>
    public List<int> selectionList ;
    /// <summary>
    /// 选项的筛选个数
    /// </summary>
    public int selectCount;
    /// <summary>
    /// 该事件是否是剧本唯一的，必须结合rndSet中的多维
    /// </summary>
    public int isUnique;
    /// <summary>
    /// 
    /// </summary>
    public int isKeyEvent;
    /// <summary>
    /// 
    /// </summary>
    public int isBlock;
    /// <summary>
    /// 
    /// </summary>
    public int eventType;



    public Event_template() { }
    public Event_template(string content)
    {
        Reader(content);
    }
    /// <summary>
    /// 读取配置表
    /// </summary>
    public void Reader(string content)
    {
        string[] array = content.Split('\t');
        eventID = int.Parse(array[0]);
        eventName = array[1];
        WPIcon = int.Parse(array[2]);
        eventRP = array[3];
        visitTime = int.Parse(array[4]);
        mobModel = int.Parse(array[5]);
        startDialog = int.Parse(array[6]);
        defaultSuccess = int.Parse(array[7]);
        defaultFailure = int.Parse(array[8]);
        //列表selectionList 取值
        array[9] = array[9].Replace("[", "").Replace("]", "").Replace(" ","");
        selectionList  = new List<int>();
        foreach (var _str in array[9].Split(','))
        {
            try { selectionList .Add(int.Parse(_str)); }
            catch (Exception) { }
        }
        selectCount = int.Parse(array[10]);
        isUnique = int.Parse(array[11]);
        isKeyEvent = int.Parse(array[12]);
        isBlock = int.Parse(array[13]);
        eventType = int.Parse(array[14]);
    }
}
