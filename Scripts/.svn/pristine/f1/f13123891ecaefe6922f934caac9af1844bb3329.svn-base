using System.Collections.Generic;

/// <summary>
/// EventAttribute
/// </summary>
public partial class EventAttribute
{
    public int WPLevel { get { return wp_template.WPLevel; } }
    /// <summary>
    /// 事件Id
    /// </summary>
    public int eventId;
    /// <summary>
    /// 路点Id
    /// </summary>
    public int waypointId;
    /// <summary>
    /// 事件等级
    /// </summary>
    public int eventLevel;

    public int EventIndex { get { return _eventIndex; } }

    public WPEventType EventType { get { return eventType; } }
    /// <summary>
    ///1=道中 2=陷阱 3=草丛下 4=草丛上
    /// </summary>
    public int EventPosType { get { return _eventPosType; } }
    /// <summary>
    /// 场景中位置
    /// </summary>
    public float ScenePos { get { return _scenePos; } }
    /// <summary>
    /// 场景索引
    /// </summary>
    public int SceneIndex { get { return _sceneIndex; } }
    /// <summary>
    /// 选项列表
    /// </summary>
    public List<SelectionAttribute> SelectionAttributes { get { return _selectionAttributes; } }
    /// <summary>
    /// 是否访问
    /// </summary>
    public bool IsCall { get { return _isCall; } }
    /// <summary>
    /// 默认成功选项
    /// </summary>
    public SelectionAttribute DefultSuccessSelection { get { return _defultSuccessSelection; } }
    /// <summary>
    /// 默认失败选项
    /// </summary>
    public SelectionAttribute DefultFailureSelection { get { return _defultFailureSelection; } }

    public bool isHaveSmoke;

    /// <summary>
    /// 访问事件
    /// </summary>
    public void VisitEvent()
    {
        //是否是boss事件
        if (event_template.isUnique == 1)
        {
            FortSystem.Instance.FinishUniqueEvent(eventId);
        }
        _isCall = true;
    }


    public EventAttribute(int eventId, EventAttribute eventAttribute)
    {
        _sceneIndex = eventAttribute._sceneIndex;
        _eventPosType = eventAttribute._eventPosType;
        _scenePos = eventAttribute.ScenePos;
        Init(eventId, eventAttribute.waypointId, eventAttribute.teamAttribute, eventAttribute._baseWPLevel, eventAttribute.isHaveSmoke);
    }

    /// <summary>
    /// 新建
    /// </summary>
    public EventAttribute(int _eventId, int _waypointId, int sceneIndex, float eventPos, int eventPosType, TeamAttribute _teamAttribute, int baseWPLevel, bool isHaveSmoke = true)
    {
        _sceneIndex = sceneIndex;
        _eventPosType = eventPosType;
        _scenePos = eventPos;
        Init(_eventId, _waypointId, _teamAttribute, baseWPLevel, isHaveSmoke);
    }

    /// <summary>
    /// 设置索引
    /// </summary>
    /// <param name="value"></param>
    public void SetEventIndex(int value)
    {
        _eventIndex = value;
    }

    /// <summary>
    /// 初始化
    /// </summary>
    private void Init(int _eventId, int _waypointId, TeamAttribute _teamAttribute, int baseWPLevel, bool isHaveSmoke = true)
    {
        eventId = _eventId;
        waypointId = _waypointId;
        teamAttribute = _teamAttribute;
        this.isHaveSmoke = isHaveSmoke;
        _baseWPLevel = baseWPLevel;
        //
        event_template = Event_templateConfig.GetEventTemplate(_eventId);
        if (event_template == null)
        {
            return;
        }
        wp_template = WP_templateConfig.GetWpTemplate(_waypointId);
        eventType = (WPEventType)event_template.eventType;
        eventLevel = WPLevel + baseWPLevel;
        //创建怪物
        //
        CreateSeletion();
        //添加默认选项
        _defultSuccessSelection = CreateSelectionAttribute(event_template.defaultSuccess, 0);
        _defultFailureSelection = CreateSelectionAttribute(event_template.defaultFailure, 0);
    }

    /// <summary>
    /// 创建选项
    /// </summary>
    private void CreateSeletion()
    {
        //新机制
        _selectionAttributes.Clear();
        int count = event_template.selectCount;
        List<int> IDs = RandomBuilder.RandomValues(GetUsableSelectionList(), count);
        foreach (int id in IDs)
        {
            Event_selection temp = Event_selectionConfig.GetSelection(id);
            if (temp == null)
            {
                continue;
            }

            bool isUse = true;
            //需要的
            foreach (int item in temp.flagReq)
            {
                if (item != 0 && !ScriptSystem.Instance.Flags.Contains(item))
                {
                    isUse = false;
                    break;
                }
            }
            if (!isUse)
            {
                continue;
            }
            //不需要的
            foreach (int item in temp.flagForbid)
            {
                if (item != 0 && ScriptSystem.Instance.Flags.Contains(item))
                {
                    isUse = false;
                    break;
                }
            }
            if (!isUse)
            {
                continue;
            }
            _selectionAttributes.Add(CreateSelectionAttribute(id, 0));
        }
        return;
    }

    /// <summary>
    /// 得到可以使用的选项
    /// </summary>
    /// <returns></returns>
    private List<int> GetUsableSelectionList()
    {
        List<int> IDs = new List<int>();
        foreach (int selectionID in event_template.selectionList)
        {
            //种族需求
            if (!Event_selectionConfig.IsUsable(selectionID, teamAttribute))
            {
                continue;
            }
            IDs.Add(selectionID);
        }

        return IDs;
    }

    /// <summary>
    /// 创建选项属性
    /// </summary>
    /// <param name="id"></param>
    /// <returns></returns>
    private SelectionAttribute CreateSelectionAttribute(int id, int phase)
    {
        if (id == 0)
        {
            return null;
        }
        return new SelectionAttribute(id, phase, this);
    }


    /// <summary>
    /// 是否访问过
    /// </summary>
    private bool _isCall;
    private int _baseWPLevel;
    private int _eventPosType;
    private float _scenePos;
    private int _sceneIndex;
    private int _eventIndex;
    private WPEventType eventType;
    private List<SelectionAttribute> _selectionAttributes = new List<SelectionAttribute>();
    private SelectionAttribute _defultSuccessSelection;
    private SelectionAttribute _defultFailureSelection;
}