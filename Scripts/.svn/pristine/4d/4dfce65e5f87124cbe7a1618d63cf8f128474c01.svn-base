using GameEventDispose;
using Spine;
using System;
using System.Collections;
using UnityEngine;

/// <summary>
/// 探索角色
/// </summary>
public class UIExploreChar : CharSkeletonOperation
{

    public void OpenShow(bool isShow = true)
    {
        gameObject.SetActive(isShow);
    }

    /// <summary>
    /// 初始化
    /// </summary>
    public void Init(CombatUnit combatUnit, float sizeValue = 36)
    {
        charTrans = transform.Find("Char");
        _charRPack = CharRPackConfig.GeCharShowTemplate(combatUnit.charAttribute.char_template.templateID);
        //
        // charTrans.localScale = Vector3.one * sizeValue;
        charTrans.localScale = Vector3.one * 36;
        startPos = charTrans.localPosition;
        //
        base.InitAdd(combatUnit);
        base.Init(LoadSkeletonRes(_charRPack.charRP, charTrans, 21));
        //
        EventDispatcher.Instance.CombatEvent.AddEventListener<CombatUIOperationType, object>(EventId.CombatEvent, OnCombatUIEvent);
        EventDispatcher.Instance.ExploreEvent.AddEventListener<ExploreEventType, object>(EventId.ExploreEvent, OnExploreEvent);
    }

    /// <summary>
    /// 播放动作
    /// </summary>
    /// <param name="charModuleAction"></param>
    /// <param name="isAutoIdle"></param>
    public void PlayAction(CharModuleAction charModuleAction, bool isAutoIdle = false)
    {
        Spine.AnimationState.TrackEntryDelegate trackentry = null;
        if (isAutoIdle)
        {
            trackentry = ActionPlayEnd;
        }

        base.PlayAction(charModuleAction, trackentry);
    }
    /// <summary>
    /// 重置屏幕
    /// </summary>
    /// <returns></returns>
    public void ResetScene(Action<float> action)
    {
        aspd = 300;
        isVisiteEventMoveEnd = false;
        new CoroutineUtil(IEResetScene(initPos1, action));
    }
    private IEnumerator IEResetScene(Vector3 position, Action<float> action)
    {
        //先移动到7/8的位置上
        Vector3 tempPos = Vector3.right * (800 / 2f) + Vector3.up * initPos.y;
        float temp = charTrans.localScale.y;
        charTrans.localScale = Vector3.one * temp;
        if (charTrans.localPosition.x < tempPos.x)
        {
            isMove = false;
            aspd = 300;
            PlayAction(CharModuleAction.Run, null);
            while (Vector3.SqrMagnitude(charTrans.localPosition - tempPos) >= 100)
            {
                charTrans.localPosition = Vector3.MoveTowards(charTrans.localPosition, tempPos, aspd * Time.deltaTime);
                yield return null;
            }
        }
        //执行方法
        if (action != null)
        {
            action(charTrans.localPosition.x - position.x);
        }
        //重置到初始位置
        PlayAction(CharModuleAction.Idle, null);
        while (Vector3.SqrMagnitude(charTrans.localPosition - position) >= 100 && !isVisiteEventMoveEnd)
        {
            leftEndVector3 = initPos1;
            isMove = false;
            aspd = 300;
            charTrans.localPosition = Vector3.MoveTowards(charTrans.localPosition, position, aspd * Time.deltaTime);
            yield return null;
        }

        while (!isVisiteEventMoveEnd)
        {
            yield return null;
        }
        isVisiteEventMoveEnd = false;
        EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.ResetSceneEnd, (object)null);
    }

    private void InitPos(bool isRight = true)
    {
        Vector3 x = Vector3.one * charTrans.localScale.y;
        x.x = isRight ? charTrans.localScale.y : -charTrans.localScale.y;
        charTrans.localScale = x;
    }
    /// <summary>
    /// 动作播放结束
    /// </summary>
    /// <param name="trackentry"></param>
    private void ActionPlayEnd(TrackEntry trackentry)
    {
        skeletonAnimation.state.Complete -= ActionPlayEnd;
        base.PlayAction(CharModuleAction.Idle, null);
    }

    /// <summary>
    /// 战斗阶段事件
    /// </summary>
    private void OnCombatUIEvent(CombatUIOperationType arg1, object arg2)
    {
        switch (arg1)
        {
            case CombatUIOperationType.PlayLeftAction:
                PlayAction((CharModuleAction)arg2, null);
                //发送队伍动作
                break;
            case CombatUIOperationType.SetLeftPos:
                //设置位置
                transform.localPosition = (Vector3)arg2;
                Fade();
                break;
            case CombatUIOperationType.SetRightPos:
                //设置召唤位置
                break;
            case CombatUIOperationType.UpdateRightMove:
                //更新Npc移动
                break;
        }
    }

    /// <summary>
    /// 探索事件
    /// </summary>
    private void OnExploreEvent(ExploreEventType _type, object param)
    {
        switch (_type)
        {
            case ExploreEventType.ExploreFinish:
                break;
            case ExploreEventType.OneselfMove:
                PlayAction(CharModuleAction.Run, null);
                //
                leftEndVector3 = ((OnExploreOneselfMove)param).endVector3;
                leftEndVector3 = initPos;
                aspd = ((OnExploreOneselfMove)param).aspd;
                isUpdateMove = true;
                break;
            case ExploreEventType.OneselfMoveFinish:
                break;
            case ExploreEventType.SceneStartMove:
                isVisiteEventMoveEnd = false;
                PlayAction(CharModuleAction.Run, null);
                //
                leftEndVector3 = initPos;
                aspd = (float)param;
                aspd = aspd * (1 / Time.fixedDeltaTime);
                isMove = true;
                break;
            case ExploreEventType.SceneMoveEnd:
                PlayAction(CharModuleAction.Idle, null);
                break;
            case ExploreEventType.VisiteEventMoveEnd:
                isVisiteEventMoveEnd = true;
                break;
        }
    }
    /// <summary>
    /// 更新角色层级
    /// </summary>
    public void UpdateCharLayer()
    {
        if (skeletonAnimation == null)
        {
            return;
        }

        if (charTrans.localPosition.y > -78f)
        {
            SkeletonTool.SetSkeletonLayer(skeletonAnimation, 5);
        }
        else if (charTrans.localPosition.y > -150)
        {
            SkeletonTool.SetSkeletonLayer(skeletonAnimation, 15);
        }
        else if (charTrans.localPosition.y > -225f)
        {
            SkeletonTool.SetSkeletonLayer(skeletonAnimation, 25);
        }
        else
        {
            SkeletonTool.SetSkeletonLayer(skeletonAnimation, 35);
        }
    }

    private bool isVisiteEventMoveEnd;
    private CoroutineUtil IEUpdateMove;
    /// <summary>
    /// 访问事件移动
    /// </summary>
    /// <param name="position"></param>
    /// <param name="action"></param>
    public void VisitEventMove(Vector3 position, bool isTrapEven, Action action, float moveTime)
    {
        if (IEUpdateMove != null)
        {
            IEUpdateMove.Stop();
        }

        IEUpdateMove = new CoroutineUtil(UpdateMove(position, isTrapEven, action, moveTime));
    }

    private IEnumerator UpdateMove(Vector3 position, bool isTrapEvent, Action action, float moveTime)
    {
        PlayAction(CharModuleAction.Run, null);
        leftEndVector3 = position /*+ Vector3.left * 40*/ + Vector3.down * 147;
        float tempx = Math.Abs(charTrans.localPosition.x - leftEndVector3.x);
        float tempy = Math.Abs(charTrans.localPosition.y - leftEndVector3.y);
        float x = Math.Abs(Vector3.SqrMagnitude(charTrans.localPosition - leftEndVector3));
        if (tempx > 180 || tempy > 180)
        {
            x = charTrans.localPosition.x > leftEndVector3.x ? -charTrans.localScale.y : charTrans.localScale.y;
        }
        else
        {
            x = charTrans.localScale.y;
        }
        //    var x = charTrans.localPosition.x > leftEndVector3.x ? -charTrans.localScale.y : charTrans.localScale.y;
        charTrans.localScale = new Vector3(x, charTrans.localScale.y, charTrans.localScale.z);
        float tempX = x > 0 ? 0 : 250;
        leftEndVector3 += Vector3.right * tempX;
        aspd = 300;
        float temp = Vector3.Distance(charTrans.localPosition, leftEndVector3) / aspd;
        if (temp < moveTime)
        {
            aspd *= temp / moveTime;
        }
        float time = 0;
        if (moveTime == 0)
        {
            isVisiteEventMoveEnd = true;
        }

        while (Vector3.SqrMagnitude(charTrans.localPosition - leftEndVector3) >= 100)
        {
            if (aspd == 150 || aspd == 300)
            {
                aspd = time < moveTime ? 150 : 300;
            }

            charTrans.localPosition = Vector3.MoveTowards(charTrans.localPosition, leftEndVector3, aspd * Time.deltaTime);
            time += Time.deltaTime;
            yield return null;
        }
        while (!isVisiteEventMoveEnd)
        {
            yield return null;
        }

        PlayAction(!isTrapEvent ? CharModuleAction.Zhizao : CharModuleAction.Idle, null);
        if (action != null)
        {
            action();
        }

        isVisiteEventMoveEnd = false;
    }


    private Vector3 endVector3;
    /// <summary>
    /// 开始移动
    /// </summary>
    /// <param name="moveTime">移动时间</param>
    /// <param name="moveX">平移距离</param>
    public float StartCharMove(float moveTime, int moveType, out float movex)
    {
        InitPos();
        //
        switch (moveType)
        {
            case 1: //场景准备
                endVector3 = initPos;
                movex = Math.Abs(charTrans.localPosition.x - endVector3.x);
                break;
            case 2: //重置位置
                endVector3 = startPos;
                break;
            case 3: //重置场景 //移动到5/8位置
                endVector3 = Vector3.right * (800 / 2f) + Vector3.up * initPos.y;
                break;
        }
        movex = Math.Abs(charTrans.localPosition.x - endVector3.x);
        return Vector3.Distance(charTrans.localPosition, endVector3) / moveTime;
    }
    /// <summary>
    /// 开始移动
    /// </summary>
    /// <param name="movePos">平移位置</param>
    public float StartCharMove(Vector3 movePos, float sp, float eventWidth, out float moveDistance)
    {
        if (charTrans.localPosition.x > 0)
        {
            Vector3 temp = charTrans.localPosition;
            temp.x = 0;
            charTrans.localPosition = temp;
        }
        if (movePos.x >= charTrans.localPosition.x)
        {
            endVector3 = movePos;
            InitPos();
        }
        else
        {
            if (movePos.x <= charTrans.localPosition.x - eventWidth)
            {
                endVector3 = movePos + Vector3.right * 200;
                InitPos(false);
            }
            else
            {
                endVector3 = charTrans.localPosition;
                endVector3.y = movePos.y;
            }
        }

        moveDistance = Vector3.Distance(charTrans.localPosition, endVector3);
        return moveDistance / sp;
    }

    /// <summary>
    /// 更新移动
    /// </summary>
    public void UpdateMove(float aspd)
    {
        charTrans.localPosition =// Vector3.Lerp(charTrans.localPosition, endVector3, aspd);
           Vector3.MoveTowards(charTrans.localPosition, endVector3, aspd * Time.deltaTime);
    }


    private void StartMove()
    {
        if (!isMove)
        {
            return;
        }

        isReset = false;
        InitPos();
        charTrans.localPosition = Vector3.MoveTowards(charTrans.localPosition, leftEndVector3, aspd * Time.deltaTime);
        if (charTrans.localPosition.x >= leftEndVector3.x)
        {
            PlayAction(CharModuleAction.Idle);
            isReset = true;
            isMove = false;
            moveTime = 1.5f;
            time = 0;
            EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.MoveSceneMim, (object)(moveTime));
            float temp = Vector3.Distance(charTrans.localPosition, startPos);
            aspd = temp / moveTime;
        }
    }

    private float moveTime = 1.5f;
    private float time;
    private void ResetMove()
    {
        if (!isReset)
        {
            return;
        }

        charTrans.localPosition =// Vector3.Lerp(charTrans.localPosition, startPos, time / moveTime);
         Vector3.MoveTowards(charTrans.localPosition, startPos, aspd * Time.deltaTime);

        if (Vector3.SqrMagnitude(charTrans.localPosition - startPos) >= 100)
        {
            return;
        }

        //  if (charTrans.localPosition.x == startPos.x)
        //    {
        isReset = false;
        isMove = false;
        //   charTrans.localPosition = startPos;
        //   }
    }

    private bool isUpdateMove;
    private void Update()
    {
        StartMove();
        ResetMove();
        //  UpdateMove();
    }

    private void OnDestroy()
    {
        if (IEUpdateMove != null)
        {
            IEUpdateMove.Stop();
        }

        EventDispatcher.Instance.CombatEvent.RemoveEventListener<CombatUIOperationType, object>(EventId.CombatEvent, OnCombatUIEvent);
        EventDispatcher.Instance.ExploreEvent.RemoveEventListener<ExploreEventType, object>(EventId.ExploreEvent, OnExploreEvent);
    }
    //
    private Transform charTrans;
    private CharRPack _charRPack;
    //
    private bool isReset;
    private bool isMove;
    private Vector3 leftEndVector3;
    private Vector3 startPos;
    private float aspd;
    private Vector3 initPos = new Vector3(0, -180, 0);
    private Vector3 initPos1 = new Vector3(-485, -180, 0);

    public Transform CharTrans
    {
        get
        {
            return charTrans;
        }
    }

    public Vector3 StartPos
    {
        get
        {
            return startPos;
        }
    }

    public Vector3 InitPos1
    {
        get
        {
            return initPos;
        }
    }
}
