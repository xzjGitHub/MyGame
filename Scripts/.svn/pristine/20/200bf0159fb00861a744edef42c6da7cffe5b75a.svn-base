using GameEventDispose;
using Spine;
using Spine.Unity;
using System;
using System.Collections;
using UnityEngine;

public partial class UIExploreEventBase : MonoBehaviour
{
    public int SceneIndex;
    public float ScenePos;

    public delegate void CallBackBool(object param, Action action);

    public CallBackBool OnVisitReady;

    public bool IsEnterScreen { get { return _eventPosDetection.IsEnterScreen; } }

    /// <summary>
    /// 设置自动更新
    /// </summary>
    /// <param name="obj"></param>
    private void SetAtuoVisit()
    {
        _eventPosDetection.UpdateAutoVisit(_charTransform);
    }

    /// <summary>
    /// 立即访问
    /// </summary>
    public void ImmediateVisit()
    {
        StartVisit();
    }

    public void ResetButton()
    {
        UpdateEventButtonEnabled();
    }
    /// <summary>
    /// 添加事件
    /// </summary>
    protected void AddEvent(EventAttribute eventAttribute)
    {
        if (OnAddEvent != null)
        {
            OnAddEvent(eventAttribute);
        }
    }

    protected void EventList(TrackEntry trackEntry, Spine.Event e)
    {
        switch (e.Data.Name)
        {
            case _bxName2Str:
                //  VisitEventEnd();
                break;
            case _bxName3Str:
                break;
        }
    }


    /// <summary>
    /// 点击按钮
    /// </summary>
    private void OnClickButton()
    {
        //todo 陷阱事件访问——成功
        if (_eventAttribute.EventType == WPEventType.Trap)
        {
            if (_eventProgress != null)
            {
                _eventProgress.StopOpen();
            }
            PlayEventIdleAnimation();
            _selectionPopup.TarpEventSelectSuccess();
            return;
        }
        //是否能访问
        if (!ExploreSystem.Instance.IsCanVisit(eventIndex))
        {
            return;
        }
        //  UpdateEventButtonEnabled(false);
        if (OnVisitReady != null)
        {
            OnVisitReady(this, StartVisit);
        }
    }
    /// <summary>
    /// 开始访问
    /// </summary>
    private void StartVisit()
    {
        if (!_isStartDialog)
        {
            if (_dialogPopup == null)
            {
                _dialogPopup = GameModules.popupSystem.GetPopupObj(ModuleName.dialogPopup).GetComponent<UIDialogPopup>();
            }
            _dialogPopup.Param = this;
            _dialogPopup.OnEnd = OnCallStartDialogEnd;
            _dialogPopup.OpenUI(_eventAttribute.event_template.startDialog);
            return;
        }
        OpenEventProgress();
    }
    /// <summary>
    /// 开始对话完成
    /// </summary>
    /// <param name="param"></param>
    private void OnCallStartDialogEnd(object param)
    {
        _isStartDialog = true;
        OpenEventProgress();
    }

    /// <summary>
    /// 打开事件进度
    /// </summary>
    private void OpenEventProgress()
    {
        if (_eventType == WPEventType.Trap)
        {
            //todo 打开陷阱事件显示
            UpdateEventShowState();
            UpdatEventIconShow();
            PlayEventIdleAnimation();
            UpdateEventButtonEnabled();
            //
            OpenSelection();
            EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.VisitEvent, (object)_eventAttribute);
        }
        //打开进度
        if (_eventProgress != null)
        {
            _eventProgress.OnProgressAchieve = OnEventProgressAchieve;
            _eventProgress.OpenUI(_eventType == WPEventType.Trap ? _eventAttribute.event_template.visitTime : 0);
            return;
        }
        //进度完成
        OnEventProgressAchieve(null);
    }

    /// <summary>
    /// 事件进度完成
    /// </summary>
    private void OnEventProgressAchieve(object param)
    {

        if (_eventAttribute.EventType == WPEventType.Trap)
        {
            //TODO 陷进事件的访问_失败
            UpdateEventButtonEnabled(false);
            _selectionPopup.TarpEventSelectFailure();
            return;
        }
        EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.VisitEvent, (object)_eventAttribute);
        //打开选项
        OpenSelection();
    }


    /// <summary>
    /// 打开选项
    /// </summary>
    private void OpenSelection()
    {
        if (_eventType != WPEventType.Trap)
        {
            //托管选项
            _selectionPopup.OnExit = OnClickExit;
            _selectionPopup.OnBack = OnClickBack;
            _selectionPopup.OnResurrection = OnClickResurrection;
            _selectionPopup.OnPullout = OnClickPullout;
        }
        //托管选项
        _selectionPopup.OnEventEnd = OnCallBackEventEnd;
        //
        _selectionPopup.OpenUI(this, _charTransform);
    }


    /// <summary>
    /// 事件结束回调
    /// </summary>
    /// <param name="param"></param>
    private void OnCallBackEventEnd(object param)
    {
        VisitEventEnd();
        if (param == null)
        {
            return;
        }
        Event_template eventTemplate = Event_templateConfig.GetEventTemplate((param as SelectionAttribute).event_selection.relatedEvent);
        if (eventTemplate == null)
        {
            return;
        }
        AddEvent(new EventAttribute(eventTemplate.eventID, _eventAttribute));
    }



    /// <summary>
    /// 事件访问结束
    /// </summary>
    protected void VisitEventEnd()
    {
        _isBlock = false;
        gameObject.SetActive(false);
        EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.VisitEventEnd, (object)_eventAttribute);
        Destroy(gameObject);
    }

    /// <summary>
    /// 重置事件
    /// </summary>
    protected void ResetEvent()
    {
        UpdateEventButtonEnabled();
        UpdateEventNameShow();
        UpdateEventShowState();
    }

    /// <summary>
    /// 更新事件名字显示
    /// </summary>
    /// <param name="isShow"></param>
    protected void UpdateEventNameShow(bool isShow = false)
    {
        if (_eventNameText != null)
        {
            _eventNameText.gameObject.SetActive(isShow);
        }
    }
    /// <summary>
    /// 渐隐渐现事件名字
    /// </summary>
    /// <param name="isFade"></param>
    protected void FadeEventName(bool isFade)
    {
        if (_eventNameText != null)
        {
            new CoroutineUtil(IEFade(_eventNameText, isFade));
        }
    }
    /// <summary>
    /// 更新事件按钮状态————默认可以点击
    /// </summary>
    /// <param name="_isClick"></param>
    protected void UpdateEventButtonEnabled(bool _isClick = true)
    {
        _eventButton.enabled = _isClick;
    }
    /// <summary>
    /// 更新事件显示状态
    /// </summary>
    /// <param name="iShow"></param>
    protected void UpdateEventShowState(bool iShow = true)
    {
        ShowTranS.gameObject.SetActive(iShow);
    }

    /// <summary>
    /// 更新事件图标显示
    /// </summary>
    /// <param name="isShow"></param>
    protected void UpdatEventIconShow(bool isShow = true)
    {
        _iconEffect.transform.parent.gameObject.SetActive(true);
    }
    /// <summary>
    /// 播放事件动画
    /// </summary>
    /// <param name="playStr"></param>
    /// <param name="isLoop"></param>
    protected void PlayEventAnimation(string playStr, bool isLoop = false)
    {
        _iconEffect.AnimationState.SetAnimation(0, playStr, isLoop);
    }
    /// <summary>
    /// 播放事件打开动画
    /// </summary>
    protected void PlayEventOpenAnimation()
    {
        PlayEventAnimation(_bxName2Str);
    }
    /// <summary>
    /// 播放事件待机动画
    /// </summary>
    protected void PlayEventIdleAnimation()
    {
        PlayEventAnimation(_bxName1Str, true);
    }
    /// <summary>
    /// 播放事件失败动画
    /// </summary>
    protected void PlayEventFailedAnimation()
    {
        PlayEventAnimation(_bxName3Str, false);
    }
    /// <summary>
    /// 淡出淡入事件
    /// </summary>
    protected void FadeFadeInEvent(bool isDestroy = true, bool isFade = true)
    {
        FadeFadeIn(_iconEffect, isDestroy, isFade);
    }
    protected void Scale(int initSize = 0)
    {
        return;
        new CoroutineUtil(IEScale(initSize));
    }
    /// <summary>
    /// 渐隐渐显
    /// </summary>
    protected void FadeFadeIn(object param, bool isDestroy = true, bool isFade = true)
    {
        if (!gameObject.activeInHierarchy)
        {
            return;
        }

        new CoroutineUtil(IEFade(param, isDestroy, isFade));
        //  new CoroutineUtil(IEFade(param, false, false));
    }

    /// <summary>
    /// 更新显示
    /// </summary>
    private void UpdateShow(string sortingLayerName, int sortingOrder)
    {
        foreach (Canvas item in _canvas)
        {
            if (item != null)
            {
                item.overrideSorting = true;
                item.sortingOrder = sortingOrder;
                item.sortingLayerName = sortingLayerName;
            }
        }
        //
        foreach (UIAlterParticleSystemLayer item in _alterParticles)
        {
            if (item == null)
            {
                continue;
            }

            item.Init();
            item.UpdateShow(sortingLayerName, sortingOrder);
        }
        //
        foreach (Renderer item in _renderers)
        {
            if (item == null)
            {
                continue;
            }

            item.sortingOrder = sortingOrder;
            item.sortingLayerName = sortingLayerName;
        }
    }

    private IEnumerator IEFade(object param, bool isDestroy, bool isFade)
    {
        if (isFade)
        {
            foreach (UIAlterParticleSystemLayer item in _alterParticles)
            {
                item.gameObject.SetActive(false);
            }
        }
        //
        _sum1 = 0;
        _sum = 0;
        //
        _sum++;
        FadeEventName(isFade);
        //
        if (param is SkeletonAnimation)
        {
            _sum++;
            new CoroutineUtil(IEFade(param as SkeletonAnimation, isFade));
        }
        //
        if (param is GameObject)
        {
            _sum++;
            new CoroutineUtil(IEFade(param as GameObject, isFade));
        }
        //
        if (param is Canvas)
        {
            _sum++;
            new CoroutineUtil(IEFade((param as Canvas).gameObject, isFade));
        }
        //
        while (_sum != _sum1)
        {
            yield return null;
        }
        //
        if (OnFadeOk != null)
        {
            OnFadeOk(null);
        }

        if (isDestroy)
        {
            Destroy(gameObject);
        }
    }
    /// <summary>
    /// 渐隐
    /// </summary>
    private IEnumerator IEFade(SkeletonAnimation skeletonAnimation, bool isFade)
    {
        if (isFade)
        {
            skeletonAnimation.skeleton.A = 1;
            while (skeletonAnimation.skeleton.A > 0)
            {
                if (skeletonAnimation.skeleton.A - Time.deltaTime * _aspd < 0)
                {
                    skeletonAnimation.skeleton.A = 0;
                    continue;
                }
                skeletonAnimation.skeleton.A -= Time.deltaTime * _aspd;
                yield return null;
            }
            skeletonAnimation.skeleton.A = 0;
            skeletonAnimation.GetComponent<MeshRenderer>().enabled = false;
            _sum1++;
            yield break;
        }
        skeletonAnimation.skeleton.A = 0;
        skeletonAnimation.GetComponent<MeshRenderer>().enabled = true;
        while (skeletonAnimation.skeleton.A < 1)
        {
            if (skeletonAnimation.skeleton.A + Time.deltaTime * _aspd > 1)
            {
                skeletonAnimation.skeleton.A = 1;
                continue;
            }
            skeletonAnimation.skeleton.A += Time.deltaTime * _aspd;
            yield return null;
        }
        skeletonAnimation.skeleton.A = 1;
        _sum1++;
    }
    /// <summary>
    /// 渐隐
    /// </summary>
    private IEnumerator IEFade(GameObject obj, bool isFade)
    {
        CanvasGroup canvasGroup = obj.GetComponent<CanvasGroup>();
        if (canvasGroup == null)
        {
            canvasGroup = obj.AddComponent<CanvasGroup>();
        }

        yield return null;
        if (isFade)
        {
            canvasGroup.alpha = 1;
            while (canvasGroup.alpha > 0)
            {
                if (canvasGroup.alpha - Time.deltaTime * _aspd < 0)
                {
                    canvasGroup.alpha = 0;
                    continue;
                }
                canvasGroup.alpha -= Time.deltaTime * _aspd;
                yield return null;
            }
            canvasGroup.alpha = 0;
            _sum1++;
            yield break;
        }
        //
        canvasGroup.alpha = 0;
        while (canvasGroup.alpha < 1)
        {
            if (canvasGroup.alpha + Time.deltaTime * _aspd > 1)
            {
                canvasGroup.alpha = 1;
                continue;
            }
            canvasGroup.alpha += Time.deltaTime * _aspd;
            yield return null;
        }
        canvasGroup.alpha = 1;
        _sum1++;
    }
    private IEnumerator IEScale(int initSize = 0)
    {
        yield return null;
        ShowTranS.localScale = Vector3.one * initSize;
        if (initSize == 0)
        {
            while (ShowTranS.localScale.x < 1)
            {
                if (ShowTranS.localScale.x + Time.deltaTime * _aspd > 1)
                {
                    ShowTranS.localScale = Vector3.one;
                    yield return null;
                }
                ShowTranS.localScale += Vector3.one * Time.deltaTime * _aspd;
                yield return null;
            }
            yield break;
        }
        while (ShowTranS.localScale.x > 0)
        {
            if (ShowTranS.localScale.x - Time.deltaTime * _aspd < 0)
            {
                ShowTranS.localScale = Vector3.zero;
                yield return null;
            }
            ShowTranS.localScale -= Vector3.one * Time.deltaTime * _aspd;
            yield return null;
        }

    }

    /// <summary>
    /// 打开事件显示
    /// </summary>
    private void OpenEventShow()
    {
        if (OnOpenShow != null)
        {
            OnOpenShow(null);
        }
        //isShow = true;
    }

    #region 点击事件
    /// <summary>
    /// 点击了离开选项
    /// </summary>
    protected void OnClickExit(object param)
    {
        if (OnExitEvent != null)
        {
            OnExitEvent(param);
        }

        OnCallEventAutoAbandonVisit2();
    }
    /// <summary>
    /// 点击了返回选项
    /// </summary>
    /// <param name="param"></param>
    private void OnClickBack(object param)
    {
        EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.EventQuit, (object)null);
        ResetEvent();
    }
    /// <summary>
    /// 点击了撤退
    /// </summary>
    /// <param name="param"></param>
    private void OnClickPullout(object param)
    {
        if (OnPullout != null)
        {
            OnPullout(param);
        }
        OnPullout = null;
    }

    /// <summary>
    /// 点击了复活
    /// </summary>
    /// <param name="param"></param>
    private void OnClickResurrection(object param)
    {
        ResetEvent();
    }

    #endregion
}
