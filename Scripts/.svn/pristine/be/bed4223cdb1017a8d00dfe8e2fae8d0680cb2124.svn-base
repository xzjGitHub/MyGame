using System.Collections.Generic;
using UnityEngine;
using Res;
using System;

public enum CavasType
{
    Three,
    PopUI
}

public partial class UIPanelManager: Singleton<UIPanelManager>
{
    //一般界面位置
    public Transform ThreeUIParent { get; set; }

    //最高层级的位置
    public Transform PopUiParent { get; set; }

    //[界面名称,界面]
    private Dictionary<string,UIPanelBehaviour> m_allPanels;

    //界面路径
    private PanelPath m_panelPath;

    //隐藏物体位置
    private Transform m_hidePanelParent;

    //异步加载需要的
    private string m_panelName;
    private List<object> m_parmers;
    private CavasType m_cavasType;
    private RequestInfo m_requestInfo;

    protected UIPanelManager()
    {
        m_panelPath = new PanelPath();
        m_allPanels = new Dictionary<string,UIPanelBehaviour>();

        ThreeUIParent = GameObject.Find("3DUI").transform;
        PopUiParent = GameObject.Find("PopUI").transform;

        m_hidePanelParent = new GameObject("[HidePanelParent]").transform;
    }

    //获取界面prefab
    private GameObject GetPanelObj(string panelName)
    {
        GameObject obj = null;
        if(m_allPanels.ContainsKey(panelName))
        {
            obj = m_allPanels[panelName].gameObject;
        }
        if(obj == null)
        {
            GameObject temp = ResManager.Instance.GetAssetSync<GameObject>(AssetType.Panel,m_panelPath.GetPanelPath(panelName));
            obj = GameObject.Instantiate<GameObject>(temp);
        }
        return obj;
    }

    /// <summary>
    /// 同步加载界面
    /// </summary>
    /// <typeparam name="T">界面类型</typeparam>
    /// <param name="cavasType">所属界面类型</param>
    /// <param name="parmers">参数</param>
    /// <returns></returns>
    public T Show<T>(CavasType cavasType = CavasType.Three,
        List<object> parmers = null) where T : UIPanelBehaviour
    {
        UIPanelBehaviour panel = null;
        string typeName = typeof(T).Name;
        GameObject panelGameObject = GetPanelObj(typeName);
        SetPanel<T>(cavasType,panelGameObject,typeName,out panel,parmers);
        return panel as T;
    }

    /// <summary>
    /// 异步加载界面
    /// </summary>
    /// <typeparam name="T">界面类型</typeparam>
    /// <param name="cavasType">所属界面类型</param>
    /// <param name="parmers">参数</param>
    /// <returns></returns>
    public T ShowAsync<T>(CavasType cavasType = CavasType.Three,
        List<object> parmers = null) where T : UIPanelBehaviour
    {
        if(m_requestInfo != null && !m_requestInfo.IsDone)
            return null;
        UIPanelBehaviour panel = null;
        string typeName = typeof(T).Name;
        GameObject panelGameObject = null;
        if(m_allPanels.ContainsKey(typeName))
            panelGameObject = m_allPanels[typeName].gameObject;
        if(panelGameObject != null)
        {
            SetPanel<T>(cavasType,panelGameObject,typeName,out panel,parmers);
        }
        else
        {
            m_panelName = typeName;
            m_parmers = parmers;
            m_cavasType = cavasType;
            m_requestInfo = ResManager.Instance.GetAssetAsync<GameObject>(AssetType.Panel,m_panelPath.GetPanelPath(m_panelName),
                true,Utility.GenerateOnlyId(),
                LoadPanelDone,(string error) => { LogHelper_MC.LogError(error); });
        }
        return panel as T;
    }

    /// <summary>
    /// 异步加载界面完成
    /// </summary>
    /// <param name="obj"></param>
    public void LoadPanelDone(UnityEngine.Object obj,string uid)
    {
        GameObject temp = obj as GameObject;
        GameObject panelObj = GameObject.Instantiate<GameObject>(temp);
        SetPanelParent(m_cavasType,panelObj);

        Type type = Type.GetType(m_panelName);
        UIPanelBehaviour panel = panelObj.AddComponent(type) as UIPanelBehaviour;
        panel.Show(m_parmers);
        if(!m_allPanels.ContainsKey(m_panelName))
        {
            m_allPanels.Add(m_panelName,panel);
        }
        else
        {
            m_allPanels[m_panelName] = panel;
        }
        m_requestInfo = null;
    }

    //设置界面
    private void SetPanel<T>(CavasType type,GameObject panelGameObject,string typeName,
       out UIPanelBehaviour panel,List<object> parmers) where T : UIPanelBehaviour
    {
        SetPanelParent(type,panelGameObject);
        if(m_allPanels.ContainsKey(typeName))
        {
            panel = m_allPanels[typeName];
            panel.Reactive();
        }
        else
        {
            panel = Utility.RequireComponent<T>(panelGameObject);
            panel.Show(parmers);
            m_allPanels.Add(typeName,panel);
        }
    }

    //设置到指定目录下
    private void SetPanelParent(CavasType type,GameObject obj)
    {
        Transform parent = type == CavasType.PopUI ? PopUiParent : ThreeUIParent;
        Utility.AddChild(parent,obj);
        obj.transform.SetAsLastSibling();
    }

    /// <summary>
    /// 隐藏物体
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <param name="needDestroy">是否需要销毁物体</param>
    public void Hide<T>(bool needDestroy = true) where T : UIPanelBehaviour
    {
        string typeName = typeof(T).Name;
        if(m_allPanels.ContainsKey(typeName))
        {
            m_allPanels[typeName].Hide();
            Utility.SetParent(m_allPanels[typeName].gameObject,m_hidePanelParent,false);
            if(needDestroy)
            {
                GameObject.DestroyImmediate(m_allPanels[typeName].gameObject);
                ReleasePanel(typeName);
                m_allPanels.Remove(typeName);
            }
        }
    }

    /// <summary>
    /// 获取一个界面的对象
    /// </summary>
    /// <typeparam name="T"></typeparam>
    /// <returns></returns>
    public T GetUiPanelBehaviour<T>() where T : UIPanelBehaviour
    {
        string key = typeof(T).Name;
        if(m_allPanels.ContainsKey(key))
        {
            return m_allPanels[key] as T;
        }
        return null;
    }

    /// <summary>
    /// 移除所有界面但不包括某些界面
    /// </summary>
    /// <param name="list">不用移除的界面</param>
    public void DestroyAllPanelNotContain(List<string> list)
    {
        List<string> keys = new List<string>();
        keys.AddRange(m_allPanels.Keys);
        for(int i = 0; i < keys.Count; i++)
        {
            if(list != null && list.Contains(keys[i]))
            {
                continue;
            }
            GameObject.DestroyImmediate(m_allPanels[keys[i]].gameObject);
            ReleasePanel(keys[i]);
            m_allPanels.Remove(keys[i]);
        }
    }

    private void ReleasePanel(string panelName)
    {
        ResManager.Instance.ReleaseAsset(AssetType.Panel,m_panelPath.GetPanelPath(panelName));
    }
}
