using System.Collections.Generic;
using UnityEngine;

public class SpriteAssetInfo
{
    public Sprite Spri;
    public int Count;
}

//todo 维护一个引用计数
public class SpriteManager: Singleton<SpriteManager>
{
    private Dictionary<string,Dictionary<string,Sprite>> m_dict;

    private SpriteManager()
    {
        m_dict = new Dictionary<string,Dictionary<string,Sprite>>();
    }

    public Sprite GetSprite(string spriteTypeName,string spriteName)
    {
        if(string.IsNullOrEmpty(spriteTypeName))
        {
            LogHelper_MC.LogError("spriteTypeName IsNullOrEmpty");
            return null;
        }
        if(string.IsNullOrEmpty(spriteName))
        {
            LogHelper_MC.LogError("spriteName IsNullOrEmpty");
            return null;
        }

        Sprite sprite = GetSpriteInDict(spriteTypeName,spriteName);
        if(sprite == null)
        {
            sprite = LoadSprite(spriteTypeName,spriteName);
        }
        return sprite;
    }

    private Sprite GetSpriteInDict(string spriteTypeName,string spriteName)
    {
        if(m_dict.ContainsKey(spriteTypeName))
        {
            if(m_dict[spriteTypeName] != null && m_dict[spriteTypeName].ContainsKey(spriteName))
            {
                return m_dict[spriteTypeName][spriteName];
            }
        }
        return null;
    }

    private Sprite LoadSprite(string spriteTypeName,string spriteName)
    {
        Sprite sp = null;
        if(!m_dict.ContainsKey(spriteTypeName))
        {
            m_dict.Add(spriteTypeName,new Dictionary<string,Sprite>());
        }
        SpriteData data = Resources.Load<SpriteData>("ScriptableData/SpriteData/" +
           spriteTypeName + "/" + spriteName);

        if(data == null)
        {
            LogHelper_MC.LogError("SpriteData is null: " + " spriteTypeName: " +
                spriteTypeName + " spriteName" + spriteName);
        }
        else
        {
            m_dict[spriteTypeName].Add(spriteName,data.Spri);
            sp = data.Spri;
            Resources.UnloadAsset(data);
        }
        return sp;
    }

    public void Free(string spriteTypeName,string spriteName)
    {
        if(!m_dict.ContainsKey(spriteTypeName))
            return;
        if(!m_dict[spriteTypeName].ContainsKey(spriteName))
            return;
        Resources.UnloadAsset(m_dict[spriteTypeName][spriteName]);
        m_dict[spriteTypeName].Remove(spriteName);
    }

    public void Free(string spriteTypeName)
    {
        if(!m_dict.ContainsKey(spriteTypeName))
            return;
        List<Sprite> list = new List<Sprite>();
        list.AddRange(m_dict[spriteTypeName].Values);
        for(int i = 0; i < list.Count; i++)
        {
            Resources.UnloadAsset(list[i]);
        }
        m_dict.Remove(spriteTypeName);
    }

    public void FreeAll()
    {
        List<string> list = new List<string>();
        list.AddRange(m_dict.Keys);
        for(int i = 0; i < list.Count; i++)
        {
            Free(list[i]);
        }
        m_dict.Clear();
    }
}

