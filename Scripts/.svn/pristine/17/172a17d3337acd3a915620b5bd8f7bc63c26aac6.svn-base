using GameEventDispose;
using System;
using System.Collections.Generic;
using UnityEngine;

/// <summary>
/// 探索事件
/// </summary>
public partial class UIExploreEvent : MonoBehaviour
{

    public delegate void CallBack();
    public delegate void CallBackBool(object param, Action action);
    public delegate void CallBack2(object param);

    public CallBack2 OnBlock;
    public CallBack2 OnAutoVisit;
    public CallBack2 OnClickPullout;
    public CallBack OnExitEvent;
    public CallBack OnInitOK;
    public CallBack OnMoveEnd;
    public CallBack OnVisiting;
    public CallBackBool OnVisitReady;

    //
    public float xValue;
    public float x1Value;
    public float sizeValue;
    //
    public RectTransform RectTransform { get { return rectTrans; } }

    public Dictionary<int, RectTransform> EventObjObjs { get { return _eventObjs; } }


    public Vector2 Init(Transform charTransform)
    {
        _charTransform = charTransform;
        EventDispatcher.Instance.ExploreEvent.AddEventListener<ExploreEventType, object>(EventId.ExploreEvent, OnExploreEvent);
        rectTrans = transform.GetComponent<RectTransform>();
        //初始位置
        rectTrans.anchoredPosition = Vector2.up * hight/*+Vector2.right*550f*/;
        ResourceLoadUtil.DeleteChildObj(transform, new List<string> { "ItemMove" });
        _eventObjs.Clear();
        _eventBases.Clear();
        rectTrans.sizeDelta = new Vector2(GameTools.CanvasWidth * ExploreSystem.Instance.NowWPAttribute.SceneCount, 1);
        CreateEventList(ExploreSystem.Instance.NowWPAttribute);
        // UpdateShow(false);
        InitInfo();
        return rectTrans.sizeDelta;
    }

    /// <summary>
    /// 点击左边
    /// </summary>
    public void ClickLeft()
    {
        if (!_eventBases.ContainsKey(ExploreSystem.Instance.NowSceneIndex))
        {
           return; 
        }
        foreach (UIExploreEventBase item in _eventBases[ExploreSystem.Instance.NowSceneIndex])
        {
            if (item == null)
            {
                continue;
            }
            if (item.IsBlock)
            {
                item.CancelBlock();
            }
        }
    }
    /// <summary>
    /// 点击右边
    /// </summary>
    public void ClickRight()
    {
        if (!_eventBases.ContainsKey(ExploreSystem.Instance.NowSceneIndex))
        {
            return;
        }
        foreach (UIExploreEventBase item in _eventBases[ExploreSystem.Instance.NowSceneIndex])
        {
            if (item == null)
            {
                continue;
            }
            item.OpenBlock();
        }
    }


    /// <summary>
    /// 是否有阻挡事件
    /// </summary>
    /// <returns></returns>
    public bool IsHaveBlockEvent()
    {
        foreach (UIExploreEventBase item in _eventBases[ExploreSystem.Instance.NowSceneIndex])
        {
            if (item == null)
            {
                continue;
            }
            if (item.IsBlock)
            {
                return true;
            }
        }
        return false;
    }


    public void UpdateEventShow(bool isShow)
    {
        UpdateShow(isShow);
    }

    private void UpdateShow(bool isShow = true)
    {
        gameObject.SetActive(isShow);
    }

    public void SetInitPos()
    {
        rectTrans.anchoredPosition = Vector2.up * hight;
        UpdateShow();
    }

    /// <summary>
    /// 创建事件列表
    /// </summary>
    private void CreateEventList(WPAttribute _wpAttribute)
    {
        List<EventAttribute> eventtAttributes = ExploreSystem.Instance.NowEvents;
        //没有事件
        if (eventtAttributes == null || eventtAttributes.Count == 0)
        {
            VisitEventEnd();
            return;
        }
        UIExploreEventBase exploreEventBase;
        //创建事件
        foreach (EventAttribute item in eventtAttributes)
        {
            exploreEventBase = LoadEventRes(item, false);
            if (exploreEventBase == null)
            {
                continue;
            }

            if (!_eventBases.ContainsKey(item.SceneIndex))
            {
                _eventBases.Add(item.SceneIndex, new List<UIExploreEventBase>());
            }

            GameObject _obj = exploreEventBase.gameObject;
            _obj.name = item.eventId.ToString();
            _eventBases[item.SceneIndex].Add(exploreEventBase);
        }
        //
        if (OnInitOK != null)
        {
            OnInitOK();
        }
    }
    /// <summary>
    /// 访问事件结束
    /// </summary>
    private void VisitEventEnd()
    {
        if (OnMoveEnd != null)
        {
            OnMoveEnd();
        }

        OnMoveEnd = null;
    }


    private void Update()
    {
        UpdateAutoMove();
    }


    private bool IsCheekMoveEnd()
    {
        return Vector3.SqrMagnitude(_movePos - transform.position) <= 0 ? false : true;
    }
    /// <summary>
    /// 更新移动
    /// </summary>
    private void UpdateMove(float speed, Vector3 movePos)
    {
        transform.position = Vector3.MoveTowards(transform.position, movePos, speed * Time.deltaTime);
    }

    /// <summary>
    /// 探索事件
    /// </summary>
    private void OnExploreEvent(ExploreEventType _type, object param)
    {
        switch (_type)
        {
            case ExploreEventType.OneselfMove:
                break;
            case ExploreEventType.MoveSceneMim:
                break;
            case ExploreEventType.VisiteEventMove:
                break;
        }
    }


    /// <summary>
    /// 加载事件资源
    /// </summary>
    private UIExploreEventBase LoadEventRes(EventAttribute _eventAttribute, bool isAutoVisit)
    {
        if (_eventAttribute == null)
        {
            return null;
        }

        return LoadEventRes(_eventAttribute, GetEventVector(_eventAttribute.SceneIndex, _eventAttribute.ScenePos, _eventAttribute.EventPosType), isAutoVisit);
        // return LoadEventRes(_eventAttribute, GetEventVector(posIndex), isAutoVisit);
    }
    /// <summary>
    /// 加载事件资源
    /// </summary>
    private UIExploreEventBase LoadEventRes(EventAttribute _eventAttribute, Vector3 pos, bool isAutoVisit)
    {
        GameObject _obj = null;
        UIExploreEventBase eventBase = null;
        try
        {

            switch ((WPEventType)_eventAttribute.event_template.eventType)
            {
                case WPEventType.Combat:
                    _obj = LoadEventRes(pos, "combatEvent", transform);
                    eventBase = LoadCombatEvent(_obj, _eventAttribute);
                    InitEventBase(eventBase, _eventAttribute, isAutoVisit);
                    break;
                case WPEventType.Trap:
                case WPEventType.Base:
                    eventBase = LoadNormalEvent(pos, _eventAttribute);
                    if (eventBase != null)
                    {
                        // _obj = eventBase.gameObject;
                        InitEventBase(eventBase, _eventAttribute, isAutoVisit);
                    }
                    else
                    {
                        DestroyImmediate(eventBase.gameObject);
                    }
                    break;
                default:
                    LogHelper_MC.LogError(_eventAttribute.eventId + "未用类型" + _eventAttribute.event_template.eventType);
                    return null;
            }
        }
        catch (Exception e)
        {
            LogHelper_MC.LogError(_eventAttribute.eventId + "  " + e.Message);
            return null;
        }
        float temp;
        switch (_eventAttribute.EventPosType)
        {
            case 1:
                temp = 0.9f;
                break;
            case 2:
                temp = 0.9f;
                break;
            case 3:
                temp = 0.8f;
                break;
            case 4:
                temp = 1f;
                break;
            default:
                temp = 0.9f;
                break;
        }
        temp = 1;
        eventBase.transform.localScale = Vector3.one * temp;

        return eventBase;
    }

    /// <summary>
    /// 获得事件坐标
    /// </summary>
    private Vector3 GetEventVector(int sceneIndex, float pos, int posType)
    {
        float temp = GameTools.CanvasWidth * (sceneIndex + pos);
        switch (posType)
        {
            case 3: //  上                                           
                return Vector3.right * temp + Vector3.up * -125f;
            case 4: //  下                                           
                return Vector3.right * temp + Vector3.up * 0f;
            default:  // 中间                                         
                return Vector3.right * temp + Vector3.up * -75;
        }
    }

    /// <summary>
    /// 战斗事件
    /// </summary>
    private UIExploreEventBase LoadCombatEvent(GameObject _obj, EventAttribute _eventAttribute)
    {
        UIExploreCombatEvent combatEvent = _obj.AddComponent<UIExploreCombatEvent>();
        combatEvent.CombatInit(_eventAttribute);
        //
        return combatEvent;
    }
    /// <summary>
    /// 普通事件
    /// </summary>
    private UIExploreEventBase LoadNormalEvent(Vector3 _pos, EventAttribute _eventAttribute)
    {
        //跳出一下事件
        switch ((WPEventType)_eventAttribute.event_template.eventType)
        {
            case WPEventType.Combat:
                return null;
        }
        string eventRP = _eventAttribute.event_template.eventRP;
        if ((WPEventType)_eventAttribute.event_template.eventType == WPEventType.Trap)
        {
            eventRP = "Trap";
        }
        GameObject _obj = LoadEventRes(_pos, eventRP, transform);
        switch ((WPEventType)_eventAttribute.event_template.eventType)
        {
            case WPEventType.Base:
                return _obj.AddComponent<UIExploreBaseEvent>();
            case WPEventType.Trap:
                return _obj.AddComponent<UIExploreTrapEvent>();
            case WPEventType.Combat:
                break;
        }
        return null;
    }
    /// <summary>
    /// 初始化事件基类
    /// </summary>
    private void InitEventBase(UIExploreEventBase eventBase, EventAttribute eventAttribute, bool isAutoVisit)
    {
        eventBase.OnPullout = OnCallClickPullout;
        eventBase.OnAddEvent = OnCallAddEvent;
        eventBase.OnVisitReady = OnCallVisitReady;
        eventBase.OnExitEvent = OnCallExitEvent;
        eventBase.OnAuotoVisit = OnCallAuotoVisit;
        eventBase.OnBlock = OnCallBlock;
        //
        eventBase.xValue = xValue;
        eventBase.x1Value = x1Value;
        eventBase.sizeValue = sizeValue;
        eventBase.isAutoVisit = isAutoVisit;
        //
        eventBase.OpenUI(eventAttribute, _charTransform);
    }

    /// <summary>
    /// 加载事件资源
    /// </summary>
    private GameObject LoadEventRes(Vector3 _pos, string rp, Transform parent)
    {
        GameObject _obj = ResourceLoadUtil.LoadEventRes<GameObject>(rp);
        _obj = ResourceLoadUtil.ObjSetParent(ResourceLoadUtil.InstantiateRes(_obj), parent);
        RectTransform rect = _obj.transform.GetComponent<RectTransform>();
        rect.anchoredPosition = _pos + Vector3.left * _obj.GetComponent<RectTransform>().sizeDelta.x / 2f;
        _obj.transform.localScale = Vector3.one;
        return _obj;
    }

    #region 回调事件

    /// <summary>
    /// 点击撤退
    /// </summary>
    /// <param name="param"></param>
    private void OnCallClickPullout(object param)
    {
        if (OnClickPullout != null)
        {
            OnClickPullout(param);
        }
    }
    /// <summary>
    /// 添加事件
    /// </summary>
    /// <param name="param"></param>
    private void OnCallAddEvent(object param)
    {
        EventAttribute eventAttribute = param as EventAttribute;
        ExploreSystem.Instance.AddEvent(eventAttribute);
        _eventBases[eventAttribute.SceneIndex].Add(LoadEventRes(eventAttribute, true));

    }
    /// <summary>
    /// 访问事件准备回调
    /// </summary>
    private void OnCallVisitReady(object param, Action action)
    {
        if (OnVisitReady != null)
        {
            OnVisitReady(param, action);
        }
    }
    /// <summary>
    /// 离开事件
    /// </summary>
    private void OnCallExitEvent(object param)
    {
        if (OnExitEvent != null)
        {
            OnExitEvent();
        }
    }
    /// <summary>
    /// 自动访问
    /// </summary>
    /// <param name="param"></param>
    private void OnCallAuotoVisit(object param)
    {
        if (OnAutoVisit != null)
        {
            OnAutoVisit(param);
        }
    }
    /// <summary>
    /// 阻挡
    /// </summary>
    /// <param name="param"></param>
    private void OnCallBlock(object param)
    {
        if (OnBlock != null)
        {
            OnBlock(param);
        }
    }
    #endregion

    private void OnDestroy()
    {
        EventDispatcher.Instance.ExploreEvent.RemoveEventListener<ExploreEventType, object>(EventId.ExploreEvent, OnExploreEvent);
    }

    //
    private Transform _charTransform;
    //
    private RectTransform rectTrans;
    //
    private bool _isMove;
    private Vector3 _movePos;
    private Dictionary<int, RectTransform> _eventObjs = new Dictionary<int, RectTransform>();
    private Dictionary<int, List<UIExploreEventBase>> _eventBases = new Dictionary<int, List<UIExploreEventBase>>();
    private readonly float hight = 250;
}
