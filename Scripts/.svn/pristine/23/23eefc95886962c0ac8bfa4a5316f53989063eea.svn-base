using GameEventDispose;
using System;
using System.Collections.Generic;
using System.Linq;

/// <summary>
/// 探索系统
/// </summary>
public class ExploreSystem
{
    public static ExploreSystem Instance { get { return instance; } }


    /// <summary>
    /// 是否能移动下一个屏幕
    /// </summary>
    /// <returns></returns>
    public bool IsCanMoveNextScene()
    {
        GetNowSceneKeyEvent();
        return _nowSceneKeyEvents.All(a => a.IsCall);
    }

    public bool IsRoom { get { return _nowWPAttribute.IsRoom; } }
    public bool IsForkRoad
    {
        get
        {
            if (!IsRoom)
            {
                return false;
            }
            if (_nowWPAttribute.NextWP == null || _nowWPAttribute.NextWP.Count > 2)
            {
                return false;
            }
            if (_nowWPAttribute.NextWP.Contains(0) || _nowWPAttribute.NextWP.Contains(-1))
            {
                return false;
            }

            return true;
        }
    }

    /// <summary>
    /// 地图探索完成状态
    /// </summary>
    public bool IsMapExloreFinish { get { return _nowWPAttribute.NextWP == null || _nowWPAttribute.NextWP.Count == 0; } }
    public int NowMapId { get { return _nowMapId; } }
    public int NowWaypointId { get { return _nowWaypointId; } }
    /// <summary>
    /// 访问进度
    /// </summary>
    public float VisitProgress
    {
        get
        {
            return (_nowSceneIndex + 1) / (float)_nowWPAttribute.SceneCount;
        }
    }
    public Map_template MapTemplate { get { return Map_templateConfig.GetMap_templat(_nowMapId); } }
    /// <summary>
    /// 路点是否访问结束
    /// </summary>
    public bool IsWPVisitEnd { get { return visitEventIDs.Count == NowWPAttribute.Events.Count; } }
    public WPAttribute NowWPAttribute { get { return _nowWPAttribute; } }
    public List<WPAttribute> WpAttributes { get { return _wpAttributes; } }
    public List<ItemAttribute> BagItemAttributes { get { return _bagItemAttributes; } }
    public Map_template Map_template { get { return _map_template; } }
    public List<EventAttribute> NowEvents { get { return _nowEvents; } }
    public int NowSceneIndex { get { return _nowSceneIndex; } }
    public int NowEventIndex { get { return _nowEventIndex; } }
    public bool IsAutoVisitRoom { get { return _isAutoVisitRoom; } }
    public bool IsAuotoVisitRoad { get { return _isAuotoVisitRoad; } }

    /// <summary>
    /// 添加事件
    /// </summary>
    /// <param name="eventAttribute"></param>
    public void AddEvent(EventAttribute eventAttribute)
    {
        EventAttribute temp = _nowWPAttribute.Events.Find(a => a.EventIndex == eventAttribute.EventIndex && a.SceneIndex == eventAttribute.SceneIndex);
        if (temp != null)
        {
            _nowWPAttribute.Events.Remove(temp);
        }
        _nowWPAttribute.Events.Add(eventAttribute);
        UpdateEventInfo();
    }
    //
    public ExploreSystem(ExploreMap exploreMap, List<int> testValue = null)
    {
        if (testValue != null && testValue.Count > 0)
        {
            InitTestValue(testValue);
        }
        _exploreMap = exploreMap;
        instance = this;
        //
        _nowMapId = exploreMap.MapId;
        _map_template = Map_templateConfig.GetMap_templat(_nowMapId);
        //
        _wpAttributes = StartCreateWP();
        if (_wpAttributes.Count == 0)
        {
            LogHelper_MC.LogError("map=" + _nowMapId + "没有事件");
            return;
        }
        //
        EventDispatcher.Instance.ExploreEvent.AddEventListener<ExploreEventType, object>(EventId.ExploreEvent, OnExploreEvent);
    }

    /// <summary>
    /// 进入关卡
    /// </summary>
    public void PlayExplore(int initPos = -1)
    {
        int id = initPos == -1 ? _map_template.startWP : initPos;
        SetNowWPInfo(id);
        _selectRooms.Add(id);
    }

    public bool IsKeyAllCall()
    {
        if (_nowKeyEvents.Count == 0)
        {
            return true;
        }

        return _nowKeyEvents.All(a => a.IsCall);
    }

    /// <summary>
    /// 房间是否可以被选择
    /// </summary>
    /// <param name="wpID"></param>
    public bool IsSlectableRoom(int wpID)
    {
        if (_selectRooms.Contains(wpID))
        {
            return false;
        }
        return GetSlectableRooms(_nowWaypointId).Contains(wpID);
    }
    /// <summary>
    /// 选择房间
    /// </summary>
    /// <param name="wpID"></param>
    public bool SelectRoom(int wpID)
    {
        try
        {
            if (_selectRooms.Contains(wpID))
            {
                return false;
            }
            _selectRooms.Add(wpID);
            int previousWP = GetWPAttribute(wpID).PreviousWP;
            SetNowWPInfo(previousWP);
            if (_nowWPAttribute == null)
            {
                return false;
            }
            LogHelper_MC.LogError("选择路点=" + _nowWaypointId);
            EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.WPStartReady, (object)wpID);
            return true;
        }
        catch (Exception)
        {
            LogHelper_MC.LogError("选择路点出错=" + wpID);
            return false;
        }

    }
    /// <summary>
    ///能使用房间列表
    /// </summary>
    /// <returns></returns>
    public List<int> GetAllUsableRoomIDs(bool isGate = false)
    {
        return GetSlectableRooms(_nowWaypointId, isGate);
    }

    /// <summary>
    /// 获得可以选择的房间id列表
    /// </summary>
    private List<int> GetSlectableRooms(int wpID, bool isGate = false)
    {
        WPAttribute temp = GetWPAttribute(wpID);
        if (temp == null)
        {
            return null;
        }
        List<int> list = new List<int>();
        //添加有传送门的路点
        if (isGate)
        {
            foreach (WPAttribute item in _wpAttributes)
            {
                if (item.IsHaveGate)
                {
                    list.Add(item.WaypointId);
                }
            }
        }
        else
        {
            if (temp.IsRoom)
            {
                foreach (int nextWPID in temp.NextWP)
                {
                    //路点
                    temp = GetWPAttribute(nextWPID);
                    if (temp == null)
                    {
                        continue;
                    }
                    list.AddRange(temp.NextWP);
                }
            }
            else
            {
                list.AddRange(temp.NextWP);
            }
        }

        //清除不能用的房间ID
        int index = 0;
        List<int> indexs = new List<int>();
        foreach (int item in list)
        {
            if (GetWPAttribute(item) == null)
            {
                indexs.Add(index);
            }
            index++;
        }
        for (int i = indexs.Count - 1; i >= 0; i--)
        {
            list.RemoveAt(i);
        }

        return list;
    }
    /// <summary>
    /// 设置路段信息
    /// </summary>
    /// <param name="wpID"></param>
    private void SetNowWPInfo(int wpID)
    {
        _nowWaypointId = wpID;
        _nowWPAttribute = GetWPAttribute(wpID);
        _nowSceneIndex = 0;
        UpdateEventInfo();
        LogHelper_MC.LogError("现在路点" + _nowWaypointId);
    }

    private void UpdateEventInfo()
    {
        _nowEvents = _nowWPAttribute.Events;
        _nowKeyEvents.Clear();
        _nowSceneKeyEvents.Clear();
        foreach (EventAttribute item in _nowEvents)
        {
            if (item.event_template.isKeyEvent == 1)
            {
                _nowKeyEvents.Add(item);
                if (item.SceneIndex == _nowSceneIndex)
                {
                    _nowSceneKeyEvents.Add(item);
                }
            }
        }
    }

    /// <summary>
    /// 退出探索
    /// </summary>
    public void QuitExplore()
    {
        _nowMapId = 0;
        _nowEventIndex = -1;
        _nowWaypointId = 0;
    }
    /// <summary>
    /// 前面是否有陷阱
    /// </summary>
    public EventAttribute PreviousHaveTrap(int eventIndex)
    {
        EventAttribute nowEvent = _nowEvents.Find(a => a.EventIndex == eventIndex);
        return _nowEvents.Find(a => !a.IsCall && a.EventType == WPEventType.Trap && a.SceneIndex == nowEvent.SceneIndex && a.ScenePos <= nowEvent.ScenePos);
    }

    /// <summary>
    /// 设置点击事件
    /// </summary>
    /// <param name="index"></param>
    public void SetNowClickEvent(int index)
    {
        _nowClickEventIndex = index;
    }

    /// <summary>
    /// 是否能访问
    /// </summary>
    /// <param name="eventIndex"></param>
    /// <returns></returns>
    public bool IsCanVisit(int eventIndex)
    {
        if (_isMove || _isEventVisiting)
        {
            return false;
        }

        if (_nowClickEventIndex == -1)
        {
            //检查前面是否有战斗事件
            EventAttribute temp = _nowEvents.Find(a => a.EventIndex == eventIndex);
            float tempPos = temp.ScenePos + (1 + temp.SceneIndex);
            float nowPos;
            EventAttribute item;
            for (int i = 0; i < _nowEvents.Count; i++)
            {
                item = _nowEvents[i];
                nowPos = item.ScenePos + (1 + item.SceneIndex);
                if (item.IsCall ||
                    item.EventType != WPEventType.Combat ||
                    item.event_template.isBlock == 0 ||
                    item.EventIndex == eventIndex
                    || nowPos > tempPos)
                {
                    continue;
                }

                EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.EventVisitFail, (object)failStr);
                return false;
            }
            return true;
        }

        return true;
    }

    /// <summary>
    /// 无视事件
    /// </summary>
    public void IgnoreEvent(EventAttribute eventAttribute)
    {
        _nowEvents.Remove(eventAttribute);
    }

    /// <summary>
    /// 获得路点属性
    /// </summary>
    public EventAttribute GetEventAttribute(int eventIndex)
    {
        return _nowEvents.Find(a => a.EventIndex == eventIndex);
    }

    /// <summary>
    /// 获得路点属性
    /// </summary>
    public WPAttribute GetWPAttribute(int wpID)
    {
        return _wpAttributes.Find(a => a.WaypointId == wpID);
    }

    /// <summary>
    /// 前一个房间id
    /// </summary>
    /// <returns></returns>
    public int PreviousRoomID()
    {
        return _selectRooms.Count <= 1 ? 0 : _selectRooms[_selectRooms.Count - 2];
    }
    /// <summary>
    /// 现在房间ID
    /// </summary>
    /// <returns></returns>
    public int NowRoomID()
    {
        return _selectRooms.Count < 1 ? 0 : _selectRooms.Last();
    }

    /// <summary>
    /// 添加物品
    /// </summary>
    public void AddItem(ItemAttribute itemAttribute)
    {
        foreach (ItemAttribute item in _bagItemAttributes)
        {
            if (ItemSystem.Instance.IsItemAccumulate(item.itemType))
            {
                if (item.instanceID != itemAttribute.instanceID)
                {
                    continue;
                }

                item.sum += itemAttribute.sum;
                return;
            }
        }
        _bagItemAttributes.Add(itemAttribute);
    }

    /// <summary>
    /// 场景是否结束
    /// </summary>
    public bool IsSceneEnd(int eventIndex)
    {
        if (_nowEvents.Count == 0)
        {
            return true;
        }
        return _nowEvents.Last().EventIndex == eventIndex;
    }

    /// <summary>
    /// 是否是最后一个场景
    /// </summary>
    /// <param name="sceneIndex"></param>
    /// <returns></returns>
    private bool IsLastScene()
    {
        return true;
    }

    /// <summary>
    /// 自动选择房间
    /// </summary>
    private bool AutoSelectRoom()
    {
        if (!_isAutoSelectionRoom)
        {
            EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.NeedSelectRoom, (object)false);
            return false;
        }
        List<int> list = _nowWPAttribute.NextWP;
        if (list != null)
        {
            for (int i = list.Count - 1; i < 0; i++)
            {
                if (GetWPAttribute(list[i]) == null)
                {
                    list.RemoveAt(i);
                }
            }
        }
        if (list == null || list.Count == 0)
        {
            LogHelper_MC.LogError("没有可用的房间");
            EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.NeedSelectRoom, (object)false);
            return false;
        }
        WPAttribute temp = GetWPAttribute(RandomBuilder.RandomList(1, list)[0]);
        if (temp.IsRoom)
        {
            SetNowWPInfo(temp.WaypointId);
            EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.WPStartReady, (object)temp.WaypointId);
            return true;
        }
        SelectRoom(temp.NextWP[0]);
        LogHelper_MC.LogError("自动选择房间" + temp.NextWP[0]);
        return true;
    }

    /// <summary>
    /// 创建路点
    /// </summary>
    private List<WPAttribute> StartCreateWP()
    {
        List<WPAttribute> list = CreateWP(_map_template.startWP, 0, teamAttribute, FortSystem.Instance.FinishUniqueEvents);
        //清除相同的路点
        for (int i = list.Count - 1; i >= 0; i--)
        {
            if (list.FindAll(a => a.WaypointId == list[i].WaypointId).Count > 1)
            {
                list.RemoveAt(i);
            }
        }
        //
        return list;
    }
    /// <summary>
    /// 获得现在场景的关键事件
    /// </summary>
    private void GetNowSceneKeyEvent()
    {
        if (_nowKeyEventSceneIndex == _nowSceneIndex)
        {
            return;
        }
        _nowKeyEventSceneIndex = _nowSceneIndex;
        _nowSceneKeyEvents.Clear();
        foreach (EventAttribute item in _nowEvents)
        {
            if (item.SceneIndex != _nowSceneIndex || item.event_template.isKeyEvent != 1)
            {
                continue;
            }
            _nowSceneKeyEvents.Add(item);
        }

    }
    /// <summary>
    /// 解锁下一个屏幕
    /// </summary>
    private void UnlockNextScene()
    {
        if (_nowSceneKeyEvents.Any(a => !a.IsCall))
        {
            return;
        }
        if (_nowSceneIndex == _nowWPAttribute.SceneCount - 1)
        {
            return;
        }

        _nowSceneIndex++;
    }

    /// <summary>
    /// 创建路点
    /// </summary>
    private List<WPAttribute> CreateWP(int wpID, int previousWP, TeamAttribute teamAttribute, List<int> unusableEvents)
    {
        List<WPAttribute> list = new List<WPAttribute>();
        WP_template wP_Template = WP_templateConfig.GetWpTemplate(wpID);
        if (wP_Template == null)
        {
            return list;
        }
        //添加当前路点
        //list.Add(new WPAttribute(wpID, teamAttribute, unusableEvents, previousWP, wP_Template.nextWP, map_template.baseWPLevel));
        list.Add(new WPAttribute(wpID, teamAttribute, unusableEvents, previousWP, wP_Template.nextWP, new List<int> { _wpValue1, _wpValue2, _wpValue3, _wpValue4, _wpValue5, _wpValue6, }));
        //添加下一个路点列表
        List<WPAttribute> list1 = new List<WPAttribute>();
        foreach (int item in wP_Template.nextWP)
        {
            if (item == wpID)
            {
                continue;
            }

            list1.AddRange(CreateWP(item, wpID, teamAttribute, unusableEvents));
        }
        list.AddRange(list1);
        return list;
    }

    /// <summary>
    /// 得到事件属性
    /// </summary>
    private EventAttribute GetEventAttribute(int eventIndex, int eventID, WPAttribute wpAttribute)
    {
        return wpAttribute.Events.Find(a => a.EventIndex == eventIndex && a.eventId == eventID);
    }

    private void InitTestValue(List<int> list)
    {
        LogHelper_MC.Log(list.Count);
        _wpValue1 = list[0];
        _wpValue2 = list[1];
        _wpValue3 = list[2];
        _wpValue4 = list[3];
        _wpValue5 = list[4];
        _wpValue6 = list[5];
    }
    /// <summary>
    /// 探索事件
    /// </summary>
    private void OnExploreEvent(ExploreEventType arg1, object arg2)
    {
        switch (arg1)
        {
            case ExploreEventType.WPSelect:
                EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.WPStartReady, (object)true);
                break;
            case ExploreEventType.WPEnd:
                //是房间
                if (_nowWPAttribute.IsRoom)
                {
                    //没有后续路点 完成探索
                    if (_nowWPAttribute.NextWP == null || _nowWPAttribute.NextWP.Count == 0 || _nowWPAttribute.NextWP[0] == -1 || GetWPAttribute(_nowWPAttribute.NextWP[0]) == null)
                    {
                        EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.ExploreFinish, (object)null);
                        return;
                    }
                    AutoSelectRoom();
                    return;
                }
                //路点完成  自动访问房间
                if (_isAutoVisitRoom)
                {
                    SelectRoom(_nowWPAttribute.NextWP[0]);
                    return;
                }
                AutoSelectRoom();
                break;
            case ExploreEventType.QuitExplore:
                instance = null;
                break;
            case ExploreEventType.SceneEnd:
                EventDispatcher.Instance.ExploreEvent.DispatchEvent(EventId.ExploreEvent, ExploreEventType.WPEnd, (object)null);
                return;
            case ExploreEventType.VisitEvent:
                _isEventVisiting = true;
                _isMove = false;
                _nowEventIndex = (arg2 as EventAttribute).EventIndex;
                break;
            case ExploreEventType.VisitEventEnd:
                (arg2 as EventAttribute).VisitEvent();
                _isEventVisiting = false;
                _nowEventIndex = -1;
                _nowClickEventIndex = -1;
                UnlockNextScene();
                break;
            case ExploreEventType.SceneStartReady:
                _isMove = false;
                _nowClickEventIndex = -1;
                _nowEventIndex = -1;
                _nowSceneIndex = 0;
                _nowKeyEventSceneIndex = -1;
                break;
            case ExploreEventType.SceneStartMove:
                _isMove = true;
                break;
            case ExploreEventType.SceneMoveEnd:
                _isMove = false;
                break;
            case ExploreEventType.ExploreFinish:
                if (ScriptSystem.Instance.ScriptPhase == ScriptPhase.Front)
                {
                    ScriptSystem.Instance.SetScriptPhase(ScriptPhase.Normal);
                }
                break;
            case ExploreEventType.Loading:
                break;
            case ExploreEventType.WPStartReady:
                break;
            case ExploreEventType.NeedSelectRoom:
                break;
            case ExploreEventType.OneselfMove:
                break;
            case ExploreEventType.OneselfMoveFinish:
                break;
            case ExploreEventType.CombatEnd:
                break;
            case ExploreEventType.WPStart:
                break;
            case ExploreEventType.EventShow:
                break;
            case ExploreEventType.EventQuit:
                _isEventVisiting = false;
                _nowEventIndex = -1;
                break;
            case ExploreEventType.MoveSceneMim:
                break;
            case ExploreEventType.MoveSceneMimStart:
                break;
            case ExploreEventType.VisiteEventMove:
                break;
            case ExploreEventType.VisiteEventMoveEnd:
                break;
            case ExploreEventType.ResetScene:
                break;
            case ExploreEventType.ResetSceneEnd:
                break;
            case ExploreEventType.EventVisitFail:
                break;
        }
    }

    //
    private readonly bool _isAutoVisitRoom = false;
    private readonly bool _isAuotoVisitRoad = true;
    private readonly bool _isInitWPHaveEvent = true;
    private readonly bool _isAutoSelectionRoom = true;
    //
    private int _wpValue1 = -1;
    private int _wpValue2 = -1;
    private int _wpValue3 = -1;
    private int _wpValue4 = -1;
    private int _wpValue5 = -1;
    private int _wpValue6 = -1;

    //
    private int _nowKeyEventSceneIndex = -1;
    private List<EventAttribute> _nowSceneKeyEvents = new List<EventAttribute>();
    private bool _isEventVisiting;
    /// <summary>
    /// 现在的场景索引
    /// </summary>
    private int _nowSceneIndex = -1;
    //现在地图ID
    private int _nowMapId;
    //现在路点iD
    private int _nowWaypointId;
    //现在事件索引
    private int _nowEventIndex;
    //现在路点索引
    private readonly int nowWPIndex;
    //前一个路点ID
    private readonly int previousWpId;
    //
    private int _nowClickEventIndex;
    private bool _isMove;
    private const string failStr = "你必须前面的事件！";
    private readonly bool isTestModule;
    //队伍属性
    private readonly TeamAttribute teamAttribute = TeamSystem.Instance.TeamAttribute;
    //
    private readonly List<WPAttribute> nowWPAttributes = new List<WPAttribute>();
    private List<EventAttribute> _nowEvents = new List<EventAttribute>();
    private List<EventAttribute> _nowKeyEvents = new List<EventAttribute>();
    private List<WPAttribute> _wpAttributes = new List<WPAttribute>();
    private List<int> visitEventIDs = new List<int>();
    private List<ItemAttribute> _bagItemAttributes = new List<ItemAttribute>();
    private List<int> _selectRooms = new List<int>();
    //
    private readonly EventAttribute eventAttribute;
    private WPAttribute _nowWPAttribute;
    private readonly ExploreData exploreData;
    //
    private readonly ExploreMap _exploreMap;
    private Map_template _map_template;
    private readonly Zone zone;
    //
    private static ExploreSystem instance;
}

/// <summary>
/// 事件访问结果
/// </summary>
public class WPVisitEventResult
{
    public int eventID;
    /// <summary>
    /// 访问结果
    /// </summary>
    public WPEventVisitResult visitResult;
    /// <summary>
    /// 是否成功
    /// </summary>
    public bool isSucceed;
    /// <summary>
    /// 金币
    /// </summary>
    public int gold;
    /// <summary>
    /// 代币
    /// </summary>
    public int token;
    /// <summary>
    /// 生命球数量
    /// </summary>
    public int healingGlobSum;
    /// <summary>
    /// 奖励的物品
    /// </summary>
    public List<ItemData> itemRewards = new List<ItemData>();
    /// <summary>
    /// 角色经验
    /// </summary>
    public List<int> charExp = new List<int>();
    /// <summary>
    /// 角色消耗的生命值
    /// </summary>
    public List<int> charCostHP = new List<int>();
    /// <summary>
    /// 是否访问结束
    /// </summary>
    public bool isVisitEnd;
}